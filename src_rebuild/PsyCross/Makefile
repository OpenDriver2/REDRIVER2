# Alternative GNU Make project makefile autogenerated by Premake

ifndef config
  config=debug_x86
endif

ifndef verbose
  SILENT = @
endif

.PHONY: clean prebuild

SHELLTYPE := posix
ifeq (.exe,$(findstring .exe,$(ComSpec)))
	SHELLTYPE := msdos
endif

# Configurations
# #############################################

RESCOMP = windres
INCLUDES += -Idependencies/SDL2/include -Idependencies/openal-soft/include -Iinclude
FORCE_INCLUDE +=
ALL_CPPFLAGS += $(CPPFLAGS) -MMD -MP $(DEFINES) $(INCLUDES)
ALL_RESFLAGS += $(RESFLAGS) $(DEFINES) $(INCLUDES)
LIBS += -lopengl32 -lSDL2 -lOpenAL32
LDDEPS +=
LINKCMD = $(AR) -rcs "$@" $(OBJECTS)
define PREBUILDCMDS
endef
define PRELINKCMDS
endef
define POSTBUILDCMDS
endef

ifeq ($(config),debug_x86)
TARGETDIR = bin/Debug
TARGET = $(TARGETDIR)/Psy-X.lib
OBJDIR = obj/x86/Debug
DEFINES += -D__RPI__ -D_DEBUG -DDEBUG -DNTSC_VERSION -D_WINDOWS
ALL_CFLAGS += $(CFLAGS) $(ALL_CPPFLAGS) -m32 -g -Wno-4996 -Wno-4554 -Wno-4244 -Wno-4101 -Wno-4838 -Wno-4309
ALL_CXXFLAGS += $(CXXFLAGS) $(ALL_CPPFLAGS) -m32 -g -Wno-4996 -Wno-4554 -Wno-4244 -Wno-4101 -Wno-4838 -Wno-4309
ALL_LDFLAGS += $(LDFLAGS) -Ldependencies/SDL2/lib/x86 -Ldependencies/openal-soft/libs/Win32 -L/usr/lib32 -m32

else ifeq ($(config),release_x86)
TARGETDIR = bin/Release
TARGET = $(TARGETDIR)/Psy-X.lib
OBJDIR = obj/x86/Release
DEFINES += -D__RPI__ -DNDEBUG -DNTSC_VERSION -D_WINDOWS
ALL_CFLAGS += $(CFLAGS) $(ALL_CPPFLAGS) -m32 -O3 -Wno-4996 -Wno-4554 -Wno-4244 -Wno-4101 -Wno-4838 -Wno-4309
ALL_CXXFLAGS += $(CXXFLAGS) $(ALL_CPPFLAGS) -m32 -O3 -Wno-4996 -Wno-4554 -Wno-4244 -Wno-4101 -Wno-4838 -Wno-4309
ALL_LDFLAGS += $(LDFLAGS) -Ldependencies/SDL2/lib/x86 -Ldependencies/openal-soft/libs/Win32 -L/usr/lib32 -m32 -s

else ifeq ($(config),release_dev_x86)
TARGETDIR = bin/Release_dev
TARGET = $(TARGETDIR)/Psy-X.lib
OBJDIR = obj/x86/Release_dev
DEFINES += -D__RPI__ -DNDEBUG -DNTSC_VERSION -D_WINDOWS
ALL_CFLAGS += $(CFLAGS) $(ALL_CPPFLAGS) -m32 -O3 -Wno-4996 -Wno-4554 -Wno-4244 -Wno-4101 -Wno-4838 -Wno-4309
ALL_CXXFLAGS += $(CXXFLAGS) $(ALL_CPPFLAGS) -m32 -O3 -Wno-4996 -Wno-4554 -Wno-4244 -Wno-4101 -Wno-4838 -Wno-4309
ALL_LDFLAGS += $(LDFLAGS) -Ldependencies/SDL2/lib/x86 -Ldependencies/openal-soft/libs/Win32 -L/usr/lib32 -m32 -s

endif

# Per File Configurations
# #############################################


# File sets
# #############################################

GENERATED :=
OBJECTS :=

GENERATED += $(OBJDIR)/ABS.o
GENERATED += $(OBJDIR)/CRASHHANDLER.o
GENERATED += $(OBJDIR)/INLINE_C.o
GENERATED += $(OBJDIR)/LIBAPI.o
GENERATED += $(OBJDIR)/LIBCD.o
GENERATED += $(OBJDIR)/LIBETC.o
GENERATED += $(OBJDIR)/LIBGPU.o
GENERATED += $(OBJDIR)/LIBGTE.o
GENERATED += $(OBJDIR)/LIBMCRD.o
GENERATED += $(OBJDIR)/LIBPAD.o
GENERATED += $(OBJDIR)/LIBSN.o
GENERATED += $(OBJDIR)/LIBSPU.o
GENERATED += $(OBJDIR)/PSYX.o
GENERATED += $(OBJDIR)/PsyX_GPU.o
GENERATED += $(OBJDIR)/PsyX_GTE.o
GENERATED += $(OBJDIR)/PsyX_RENDER.o
GENERATED += $(OBJDIR)/TIMER.o
GENERATED += $(OBJDIR)/glad.o
GENERATED += $(OBJDIR)/half_float.o
OBJECTS += $(OBJDIR)/ABS.o
OBJECTS += $(OBJDIR)/CRASHHANDLER.o
OBJECTS += $(OBJDIR)/INLINE_C.o
OBJECTS += $(OBJDIR)/LIBAPI.o
OBJECTS += $(OBJDIR)/LIBCD.o
OBJECTS += $(OBJDIR)/LIBETC.o
OBJECTS += $(OBJDIR)/LIBGPU.o
OBJECTS += $(OBJDIR)/LIBGTE.o
OBJECTS += $(OBJDIR)/LIBMCRD.o
OBJECTS += $(OBJDIR)/LIBPAD.o
OBJECTS += $(OBJDIR)/LIBSN.o
OBJECTS += $(OBJDIR)/LIBSPU.o
OBJECTS += $(OBJDIR)/PSYX.o
OBJECTS += $(OBJDIR)/PsyX_GPU.o
OBJECTS += $(OBJDIR)/PsyX_GTE.o
OBJECTS += $(OBJDIR)/PsyX_RENDER.o
OBJECTS += $(OBJDIR)/TIMER.o
OBJECTS += $(OBJDIR)/glad.o
OBJECTS += $(OBJDIR)/half_float.o

# Rules
# #############################################

all: $(TARGET)
	@:

$(TARGET): $(GENERATED) $(OBJECTS) $(LDDEPS) | $(TARGETDIR)
	$(PRELINKCMDS)
	@echo Linking Psy-X
	$(SILENT) $(LINKCMD)
	$(POSTBUILDCMDS)

$(TARGETDIR):
	@echo Creating $(TARGETDIR)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(TARGETDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(TARGETDIR))
endif

$(OBJDIR):
	@echo Creating $(OBJDIR)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif

clean:
	@echo Cleaning Psy-X
ifeq (posix,$(SHELLTYPE))
	$(SILENT) rm -f  $(TARGET)
	$(SILENT) rm -rf $(GENERATED)
	$(SILENT) rm -rf $(OBJDIR)
else
	$(SILENT) if exist $(subst /,\\,$(TARGET)) del $(subst /,\\,$(TARGET))
	$(SILENT) if exist $(subst /,\\,$(GENERATED)) rmdir /s /q $(subst /,\\,$(GENERATED))
	$(SILENT) if exist $(subst /,\\,$(OBJDIR)) rmdir /s /q $(subst /,\\,$(OBJDIR))
endif

prebuild: | $(OBJDIR)
	$(PREBUILDCMDS)

ifneq (,$(PCH))
$(OBJECTS): $(GCH) | $(PCH_PLACEHOLDER)
$(GCH): $(PCH) | prebuild
	@echo $(notdir $<)
	$(SILENT) $(CXX) -x c++-header $(ALL_CXXFLAGS) -o "$@" -MF "$(@:%.gch=%.d)" -c "$<"
$(PCH_PLACEHOLDER): $(GCH) | $(OBJDIR)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) touch "$@"
else
	$(SILENT) echo $null >> "$@"
endif
else
$(OBJECTS): | prebuild
endif


# File Rules
# #############################################

$(OBJDIR)/ABS.o: src/ABS.C
	@echo $(notdir $<)
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/PsyX_GPU.o: src/GPU/PsyX_GPU.C
	@echo $(notdir $<)
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/PsyX_GTE.o: src/GTE/PsyX_GTE.C
	@echo $(notdir $<)
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/half_float.o: src/GTE/half_float.cpp
	@echo $(notdir $<)
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/INLINE_C.o: src/PSX/INLINE_C.C
	@echo $(notdir $<)
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/LIBAPI.o: src/PSX/LIBAPI.C
	@echo $(notdir $<)
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/LIBCD.o: src/PSX/LIBCD.C
	@echo $(notdir $<)
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/LIBETC.o: src/PSX/LIBETC.C
	@echo $(notdir $<)
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/LIBGPU.o: src/PSX/LIBGPU.C
	@echo $(notdir $<)
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/LIBGTE.o: src/PSX/LIBGTE.C
	@echo $(notdir $<)
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/LIBMCRD.o: src/PSX/LIBMCRD.C
	@echo $(notdir $<)
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/LIBPAD.o: src/PSX/LIBPAD.C
	@echo $(notdir $<)
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/LIBSN.o: src/PSX/LIBSN.C
	@echo $(notdir $<)
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/LIBSPU.o: src/PSX/LIBSPU.C
	@echo $(notdir $<)
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/PSYX.o: src/PSYX.C
	@echo $(notdir $<)
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/PsyX_RENDER.o: src/RENDER/PsyX_RENDER.C
	@echo $(notdir $<)
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/glad.o: src/RENDER/glad.c
	@echo $(notdir $<)
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/CRASHHANDLER.o: src/UTIL/CRASHHANDLER.C
	@echo $(notdir $<)
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/TIMER.o: src/UTIL/TIMER.C
	@echo $(notdir $<)
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"

-include $(OBJECTS:%.o=%.d)
ifneq (,$(PCH))
  -include $(PCH_PLACEHOLDER).d
endif